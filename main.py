# -*- coding: utf-8 -*-
import re
import sqlite3
import uuid
import logging
from datetime import datetime, timedelta, timezone
from aiogram import Dispatcher, Router, Bot, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    PreCheckoutQuery,
    CallbackQuery,
    LabeledPrice,
    MessageEntity,
)
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# =========================
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =========================
API_TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
GROUP_CHAT_ID = '-'    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
LOG_CHAT_ID = '-'        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –ª–æ–≥-–∫–∞–Ω–∞–ª–∞
COOLDOWN_SECONDS = 3600            # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
BAN_DURATION_LINK_HOURS = 48       # –ë–∞–Ω –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫ (–≤ —á–∞—Å–∞—Ö)
BAN_DURATION_WORDS_HOURS = 10      # –ë–∞–Ω –∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤ —á–∞—Å–∞—Ö)
PERMANENT_BAN_DATE = "9999-12-31T23:59:59"  # –î–∞—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –±–∞–Ω–∞

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –∏—Ö user_id
ADMIN_IDS = [123465,]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–∞–Ω–≤–æ—Ä–¥–æ–≤)
# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–∞–Ω–≤–æ—Ä–¥–æ–≤)
BAN_WORDS = ["ban"]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
# =========================
bot = Bot(token=API_TOKEN, session=AiohttpSession())
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# =========================
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
# =========================
class Form(StatesGroup):
    awaiting_message = State()
    awaiting_author_number = State()
    admin_ban = State()
    admin_ban_duration = State()
    admin_ban_reason = State()
    admin_unban = State()
    admin_mailing = State()

# =========================
# –ü–∞–º—è—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–∞
# =========================
last_message_time = {}
user_status = {}

# =========================
# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# =========================
def setup_db():
    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            message TEXT,
            timestamp TEXT
        )
        """)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–Ω–æ–≤
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS bans (
            user_id INTEGER PRIMARY KEY,
            ban_until TEXT,
            reason TEXT
        )
        """)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS payments (
            payment_id TEXT PRIMARY KEY,
            user_id INTEGER,
            message_id INTEGER,
            timestamp TEXT,
            status TEXT
        )
        """)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT
        )
        """)
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

setup_db()

# =========================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ HTML
# =========================
def parse_entities(text: str, entities: list[MessageEntity]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if not entities:
        return text

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞—á–∞–ª—É, –∞ –∑–∞—Ç–µ–º –ø–æ –¥–ª–∏–Ω–µ
    entities = sorted(entities, key=lambda e: (e.offset, -e.length))
    result = ""
    last_index = 0

    for entity in entities:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—É—â–Ω–æ—Å—Ç—å—é –∏ —Ç–µ–∫—É—â–µ–π
        result += text[last_index:entity.offset]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        entity_text = text[entity.offset:entity.offset + entity.length]

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTML-—Ç–µ–≥
        if entity.type == "bold":
            result += f"<b>{entity_text}</b>"
        elif entity.type == "italic":
            result += f"<i>{entity_text}</i>"
        elif entity.type == "underline":
            result += f"<u>{entity_text}</u>"
        elif entity.type == "strikethrough":
            result += f"<s>{entity_text}</s>"
        elif entity.type == "code":
            result += f"<code>{entity_text}</code>"
        elif entity.type == "pre":
            result += f"<pre>{entity_text}</pre>"
        elif entity.type == "text_link":
            href = entity.url
            result += f'<a href="{href}">{entity_text}</a>'
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result += entity_text

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        last_index = entity.offset + entity.length

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–Ω–æ—Å—Ç–∏
    result += text[last_index:]

    return result

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
# =========================
def contains_link(message: str) -> bool:
    return bool(re.search(r"(https?://|www\.|@|\.ru|\.com|\.org)", message, re.IGNORECASE))

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# =========================
def is_banned(user_id: int) -> bool:
    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        cursor.execute("SELECT ban_until, reason FROM bans WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            ban_until_str, reason = row
            if ban_until_str == PERMANENT_BAN_DATE:
                return True
            ban_until = datetime.fromisoformat(ban_until_str).replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) < ban_until:
                return True
            else:
                # –ë–∞–Ω –∏—Å—Ç—ë–∫, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                cursor.execute("DELETE FROM bans WHERE user_id = ?", (user_id,))
                conn.commit()
                asyncio.create_task(notify_unban(user_id, reason))
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False
    finally:
        conn.close()

# =========================
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ
# =========================
async def notify_about_ban(user_id: int, username: str, reason: str, ban_until: datetime):
    message = (
        f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n"
        f"üìÖ –î–æ: {ban_until.strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
        f"‚ùì –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    try:
        await bot.send_message(user_id, message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    try:
        await bot.send_message(
            LOG_CHAT_ID,
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: {user_id})\n"
            f"üìÖ –ë–∞–Ω –¥–æ: {ban_until.strftime('%Y-%m-%d %H:%M:%S') if ban_until else '–ù–∞–≤—Å–µ–≥–¥–∞'}\n"
            f"‚ùì –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª: {e}")

# =========================
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–∞–Ω–µ
# =========================
async def notify_unban(user_id: int, reason: str):
    message = (
        f"‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.\n"
        f"‚ùì –ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑–±–∞–Ω–∞: {reason}"
    )
    try:
        await bot.send_message(user_id, message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    try:
        await bot.send_message(
            LOG_CHAT_ID,
            f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑–±–∞–Ω–∞: {reason}"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª: {e}")

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
# =========================
def is_on_cooldown(user_id: int) -> bool:
    if user_id not in last_message_time:
        return False
    last_time = last_message_time[user_id]
    if last_time is None:
        return False
    return (datetime.now() - last_time).total_seconds() < COOLDOWN_SECONDS

# =========================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
# =========================
def contains_ban_word(message: str) -> bool:
    pattern = re.compile(r'\b(' + '|'.join(re.escape(word) for word in BAN_WORDS) + r')\b', re.IGNORECASE)
    return bool(pattern.search(message))

# =========================
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ "üîß –ê–¥–º–∏–Ω–∫–∞"
# =========================
def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
        [KeyboardButton(text="üîç –£–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")],
        [KeyboardButton(text="‚ÑπÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([KeyboardButton(text="üîß –ê–¥–º–∏–Ω–∫–∞")])
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    return keyboard

# =========================
# –ö–æ–º–∞–Ω–¥–∞ /start —Å –º–µ–Ω—é
# =========================
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    keyboard = get_main_keyboard(message.from_user.id)
    welcome_text = (
        "üéÑüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await message.reply(
        welcome_text,
        reply_markup=keyboard
    )
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                       (message.from_user.id, message.from_user.username))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É: {e}")
    finally:
        conn.close()

# =========================
# –ö–Ω–æ–ø–∫–∞ "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
# =========================
@router.message(F.text == "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def ask_question(message: Message, state: FSMContext):
    if is_banned(message.from_user.id):
        await message.reply("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
        return
    await state.set_state(Form.awaiting_message)
    await message.reply("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª. üéÖüéÅ")

# =========================
# –ö–Ω–æ–ø–∫–∞ "üîç –£–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
# =========================
@router.message(F.text == "üîç –£–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def ask_author(message: Message, state: FSMContext):
    await state.set_state(Form.awaiting_author_number)
    await message.reply("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ! üéÑ")

# =========================
# –ö–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è"
# =========================
@router.message(F.text == "‚ÑπÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
async def navigation(message: Message):
    navigation_text = (
        "üìå *–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:*\n\n"
        "1. *‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚Äî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.\n"
        "2. *üîç –£–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è* ‚Äî üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ!\n"
        "3. *‚ÑπÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è* ‚Äî –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.\n"
        "4. *üîß –ê–¥–º–∏–Ω–∫–∞* ‚Äî –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω).\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - [Debugger_24h](https://t.me/Debugger_24h). üéÖüéÑ"
    )

    await message.reply(navigation_text, parse_mode="Markdown")

# =========================
# –ö–Ω–æ–ø–∫–∞ "üîß –ê–¥–º–∏–Ω–∫–∞"
# =========================
@router.message(F.text == "üîß –ê–¥–º–∏–Ω–∫–∞")
async def admin_menu(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ.")
        return

    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõë –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    ])

    await message.reply("üîß –ê–¥–º–∏–Ω–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. üéÖüéÑ", reply_markup=admin_keyboard)

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
# =========================
@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_callbacks(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    action = callback_query.data.split("_")[1]

    if action == "ban":
        await state.set_state(Form.admin_ban)
        await callback_query.message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è –±–∞–Ω–∞.")
    elif action == "unban":
        await state.set_state(Form.admin_unban)
        await callback_query.message.reply("‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.")
    elif action == "mailing":
        await state.set_state(Form.admin_mailing)
        await callback_query.message.reply("üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. üéÑüéÖ")

    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
# =========================
@router.message(F.chat.type == "private")
async def handle_private_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    text = message.text or message.caption or ""

    current_state = await state.get_state()

    if current_state == Form.awaiting_message:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_banned(user_id):
            await message.reply("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
            await state.clear()
            return

        if contains_link(text):
            ban_duration_hours = 48  # –ë–∞–Ω –∑–∞ —Å—Å—ã–ª–∫–∏
            ban_until = datetime.now(timezone.utc) + timedelta(hours=ban_duration_hours)
            reason = "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫."
            try:
                conn = sqlite3.connect("bot_database.db")
                cursor = conn.cursor()
                cursor.execute("INSERT OR REPLACE INTO bans (user_id, ban_until, reason) VALUES (?, ?, ?)",
                               (user_id, ban_until.isoformat(), reason))
                conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ.")
                await state.clear()
                return
            finally:
                conn.close()
            await notify_about_ban(user_id, username, reason, ban_until)
            await message.reply("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 48 —á–∞—Å–æ–≤ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫.")
            await state.clear()
            return

        if contains_ban_word(text):
            ban_duration_hours = 10  # –ë–∞–Ω –∑–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            ban_until = datetime.now(timezone.utc) + timedelta(hours=ban_duration_hours)
            reason = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."
            try:
                conn = sqlite3.connect("bot_database.db")
                cursor = conn.cursor()
                cursor.execute("INSERT OR REPLACE INTO bans (user_id, ban_until, reason) VALUES (?, ?, ?)",
                               (user_id, ban_until.isoformat(), reason))
                conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ.")
                await state.clear()
                return
            finally:
                conn.close()
            await notify_about_ban(user_id, username, reason, ban_until)
            await message.reply("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 10 —á–∞—Å–æ–≤ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
            await state.clear()
            return

        if (message.photo or message.video or message.animation) and not text.strip():
            await message.reply("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF). üéÑ")
            return

        if message.video and message.video.duration > 5:
            await message.reply("‚ùå –í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥. üéÖ")
            return

        if message.document:
            await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. ")
            return

        if is_on_cooldown(user_id):
            wait_time = COOLDOWN_SECONDS - int((datetime.now() - last_message_time[user_id]).total_seconds())
            await message.reply(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥.")
            return

        last_message_time[user_id] = datetime.now()
        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO messages (user_id, username, message, timestamp) VALUES (?, ?, ?, ?)",
                           (user_id, username, text.strip(), timestamp))
            message_id = cursor.lastrowid  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
            conn.commit()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await state.clear()
            return
        finally:
            conn.close()

        await bot.send_message(
            LOG_CHAT_ID,
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} - {user_id}\n‚è∞ –í—Ä–µ–º—è: {timestamp}\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: {text.strip()}"
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        entities = message.entities or message.caption_entities or []

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ HTML
        formatted_text = parse_entities(text, entities)

        caption = (
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üéÑ\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {formatted_text}\n\n"
            f"–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–∏—à–∏—Ç–µ @n"
            f"‚Ññ{message_id}."
        )

        try:
            if message.photo:
                await bot.send_photo(
                    GROUP_CHAT_ID,
                    message.photo[-1].file_id,
                    caption=caption,
                    parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
            elif message.video:
                await bot.send_video(
                    GROUP_CHAT_ID,
                    message.video.file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif message.animation:
                await bot.send_animation(
                    GROUP_CHAT_ID,
                    message.animation.file_id,
                    caption=caption,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    GROUP_CHAT_ID,
                    caption,
                    parse_mode="HTML"
                )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.")
            await state.clear()
            return

        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üéÖüéÑ")
        await state.clear()

    elif current_state == Form.awaiting_author_number:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            message_id = int(text.strip())
        except ValueError:
            await message.reply("üîß –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, username, message, timestamp FROM messages WHERE id = ?", (message_id,))
            row = cursor.fetchone()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            row = None
        finally:
            conn.close()

        if not row:
            await message.reply(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º #{message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            cursor.execute("""
                SELECT status FROM payments
                WHERE user_id = ? AND message_id = ? AND status = 'completed'
            """, (user_id, message_id))
            payment_row = cursor.fetchone()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            payment_row = None
        finally:
            conn.close()

        if payment_row:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            author_user_id, author_username, msg, timestamp_msg = row
            response = (
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ #{message_id}:\n\n"
                f"**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** @{author_username} (ID: {author_user_id})\n"
                f"**–¢–µ–∫—Å—Ç:** {msg}\n"
                f"**–î–∞—Ç–∞:** {timestamp_msg}"
            )
            await message.reply(response, parse_mode="Markdown")
        else:
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É –∑–∞ –¥–æ—Å—Ç—É–ø
            prices = [LabeledPrice(label="–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ", amount=100000)]  # 1.00 —Ä—É–± (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É)
            unique_id = uuid.uuid4()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            payload = f"message_{message_id}_{user_id}_{unique_id}"  # –î–æ–±–∞–≤–ª—è–µ–º UUID –∫ payload

            await bot.send_invoice(
                chat_id=message.chat.id,
                title=f"–î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é #{message_id}",
                description="üîß –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                provider_token='YOUR_PROVIDER_TOKEN',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à provider_token
                currency="RUB",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, "USD"
                prices=prices,
                payload=payload,
                start_parameter=f"buy_message_{message_id}",
                reply_markup=None  # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –º–µ—Ç–æ–¥ send_invoice
            )

            await message.reply("üîß –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üéÑ")

        await state.clear()

    elif current_state == Form.admin_ban:
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞
        target = text.strip()
        target_user_id, target_username = await resolve_user(target)
        if not target_user_id:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∏–ª–∏ @username: {target}")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º target_user_id –∏ target_username –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(target_user_id=target_user_id, target_username=target_username)
        await state.set_state(Form.admin_ban_duration)
        await message.reply("üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –±–∞–Ω–∞:")

    elif current_state == Form.admin_ban_duration:
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞
        try:
            days = int(text.strip())
            if days <= 0:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
            return

        user_data = await state.get_data()
        target_user_id = user_data.get("target_user_id")
        target_username = user_data.get("target_username")

        await state.update_data(ban_duration_days=days)
        await state.set_state(Form.admin_ban_reason)
        await message.reply("üìã –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")

    elif current_state == Form.admin_ban_reason:
        # –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞
        reason = text.strip()
        user_data = await state.get_data()
        target_user_id = user_data.get("target_user_id")
        target_username = user_data.get("target_username")
        ban_duration_days = user_data.get("ban_duration_days")

        ban_until = datetime.now(timezone.utc) + timedelta(days=ban_duration_days)
        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            cursor.execute("INSERT OR REPLACE INTO bans (user_id, ban_until, reason) VALUES (?, ?, ?)",
                           (target_user_id, ban_until.isoformat(), reason))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} ({target_username}) –∑–∞–±–∞–Ω–µ–Ω –¥–æ {ban_until.isoformat()} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        finally:
            conn.close()

        await notify_about_ban(target_user_id, target_username, reason, ban_until)
        await message.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} (ID: {target_user_id}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_duration_days} –¥–Ω–µ–π.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∞–Ω–∞
        asyncio.create_task(schedule_unban(target_user_id, ban_until, reason))

        await state.clear()

    elif current_state == Form.admin_unban:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
        target = text.strip()
        target_user_id, target_username = await resolve_user(target)
        if not target_user_id:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∏–ª–∏ @username: {target}")
            await state.clear()
            return

        reason = "–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: —Ä–∞–∑–±–∞–Ω."

        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM bans WHERE user_id = ?", (target_user_id,))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} ({target_username}) —Ä–∞–∑–±–∞–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        finally:
            conn.close()

        await notify_unban(target_user_id, reason)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} (ID: {target_user_id}) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")

        await state.clear()

    elif current_state == Form.admin_mailing:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        try:
            conn = sqlite3.connect("bot_database.db")
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            users = []
        finally:
            conn.close()

        if not users:
            await message.reply("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return

        send_text = text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'text', –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç 'message.text or message.caption or ""'
        media = None
        media_type = None

        if message.photo:
            media = message.photo[-1].file_id
            media_type = 'photo'
        elif message.video:
            media = message.video.file_id
            media_type = 'video'
        elif message.animation:
            media = message.animation.file_id
            media_type = 'animation'

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        entities = message.entities or message.caption_entities or []

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ HTML
        formatted_text = parse_entities(text, entities)

        send_text = formatted_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        sent_count = 0
        failed_count = 0

        for user in users:
            try:
                if media and media_type == 'photo':
                    await bot.send_photo(
                        user[0],
                        media,
                        caption=send_text,
                        parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    )
                elif media and media_type == 'video':
                    await bot.send_video(
                        user[0],
                        media,
                        caption=send_text,
                        parse_mode="HTML"
                    )
                elif media and media_type == 'animation':
                    await bot.send_animation(
                        user[0],
                        media,
                        caption=send_text,
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_message(
                        user[0],
                        send_text,
                        parse_mode="HTML"
                    )
                sent_count += 1
                await asyncio.sleep(0.05)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed_count += 1

        await message.reply(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")
        await state.clear()

    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        pass  # –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ—É—á—Ç–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# =========================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏ username –ø–æ @username –∏–ª–∏ user_id
# =========================
async def resolve_user(target: str):
    if target.startswith("@"):
        username_target = target[1:]
        try:
            user = await bot.get_chat(username_target)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
            if user.type == "private":
                return user.id, user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            else:
                logger.warning(f"–ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å {user.type}: @{username_target}")
                return None, None
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_target}: {e}")
            return None, None
    else:
        try:
            target_user_id = int(target)
            try:
                user = await bot.get_chat(target_user_id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
                if user.type == "private":
                    return user.id, user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                else:
                    logger.warning(f"–ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å {user.type}: {target_user_id}")
                    return None, None
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}: {e}")
                return None, None
        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target}")
            return None, None

# =========================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–∞–Ω–∞
# =========================
async def schedule_unban(user_id: int, ban_until: datetime, reason: str):
    now = datetime.now(timezone.utc)
    delay = (ban_until - now).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM bans WHERE user_id = ?", (user_id,))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        conn.close()
    await notify_unban(user_id, reason)

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
# =========================
@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def success_payment_handler(message: Message, state: FSMContext):
    payment = message.successful_payment
    payload = payment.invoice_payload
    user_id = message.from_user.id
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")

    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()

        if payload.startswith("message_"):
            # –û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            parts = payload.split("_")
            if len(parts) < 4:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø–ª–∞—Ç—ã.")
                return
            message_id = int(parts[1])
            payer_id = int(parts[2])
            # unique_id = parts[3]  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –æ–ø–ª–∞—Ç—É —Å message_id –∏ user_id

            cursor.execute("""
                INSERT INTO payments (payment_id, user_id, message_id, timestamp, status)
                VALUES (?, ?, ?, ?, ?)
            """, (
                payment.provider_payment_charge_id,
                payer_id,
                message_id,
                timestamp,
                "completed"
            ))
            conn.commit()
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment.provider_payment_charge_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {payer_id} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            await message.reply("ü•≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload
            await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.")
    finally:
        conn.close()

# =========================
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# =========================
@router.message(Command(commands=["test_format"]))
async def test_format(message: Message):
    test_message = (
        "<b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        "<i>–≠—Ç–æ –∫—É—Ä—Å–∏–≤</i>\n"
        "<a href='https://example.com'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</a>\n"
        "<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</code>"
    )
    try:
        await bot.send_message(
            message.chat.id,
            test_message,
            parse_mode="HTML"
        )
        await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# =========================
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =========================
if __name__ == "__main__":
    async def main():
        try:
            dp.include_router(router)
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            await dp.start_polling(bot)
        finally:
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

    asyncio.run(main())
